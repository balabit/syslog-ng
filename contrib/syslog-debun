#!/bin/sh
#!/bin/bash

### syslog-debun: syslog debug bundle generator
### Written/Copyright: Gyorgy Pasztor <pasztor@linux.gyakg.u-szeged.hu>, (c) 2014-2016.
### Further enhancements: Janos Szigetvari - jszigetvari at gmail dot com, (c) 2016-2017.
### This software may be used and distributed according to the terms of GNU GPLv2
### http://www.gnu.org/licenses/gpl-2.0.html

### Check for "local" variable support
if type local >/dev/null; then
	:
elif type bash >/dev/null; then
	#printf "There is no local, re-exec self in bash\n" >&2
	exec bash $0 "$@"
else
	printf "No local variable support on this system\n" >&2
	exit 1
fi

###
### Global defaults
### Do not overwrite them, parameters or distro / OS specific detections will do that if neccessary
###

default_debug_params="-Fedv --enable-core"
default_ldebug_params="-Fev"
default_pcap_params="port 514 or port 601 or port 53"
extras=""
sngallpids=""
debugpid=none
debugtailpid=none
pcappid=none
tracepids=""
ipconfig="ip addr"
routeconfig="netstat -nr"
netstatnlp="netstat -nlp"
netstatsu="netstat -su"
binprefix=/opt/syslog-ng
workdir=/tmp
lsof="lsof -p"
pscmd="ps auxwwwwwf"
pseao="ps -eao"
dfk="df -k"
dfh="df -h"
duks="du -ks"
lddcmd="ldd"
mount=mount
varlimit=1000
myplimit () { echo "Plimit query is not supported on this platform" >&3 ; }
distpkgoffile () { echo "Package file search is not supported (yet) on this platform" >&3 ; }
distpkgstatus () { echo "Package status query is not (yet) supported on this platform" >&3 ; }
selftar="tar cf - ."
showdep="dpkg -S"
pcapifparm=-i
w=w
vmstat=vmstat
dmesg=dmesg
tcpdump="tcpdump -p -s 1500 -w"
getsyslogpids="pidof syslog-ng"
trace="strace -f"
service_stop="/etc/init.d/syslog-ng stop"
service_start="/etc/init.d/syslog-ng start"
service_status="/etc/init.d/syslog-ng status"
initfile="/etc/init.d/syslog-ng"
#checkpid () { [ -d /proc/"$1" ]; }
checkpid () { [ -n "$1" ] && kill -0 "$1" 2>/dev/null ; }
#mywait () { jobs -p >${tmpdir}/sdn.jobs ; for i in `grep -v "\<$tailpid\>" ${tmpdir}/sdn.jobs` ; do wait $i ; done ; }
mywait () { jobs -p >${tmpdir}/sdn.jobs ; for i in `grep -v "^$tailpid\$" ${tmpdir}/sdn.jobs` ; do wait $i ; done ; }
is_available () { which "$1" >/dev/null 2>&1; }
distpkgoffile_cleanup () { : ; }

###
### Show Usage
###
debun_usage () {
cat <<END
Usage: syslog-debun [OPTIONS]

General Options:
  -h		Show this help page
  -R [dir]	Syslog-ng-PE's alternate install dir, instead of /opt/syslog-ng
  -W [dir]	Work dir, where debug bundle will be placed
  -l		"light" collect: Don't get data, which may disturb your sense about
		privacy, like process tree, fstab, etc. If you use with -d, then it
		will also enlighten that's params: $default_ldebug_params

Debug mode options:
  -d		Debug with params: $default_debug_params
		Warning! May increase disk io during the debug,
		and dumps huge amount of data!
  -D [params]	Debug with custom params
  -w [sec]	Wait [sec] seconds before start syslog's debug mode, and
		start realtime watching of it
  -t [sec]	Timeout for noninteractive debug

Packet capture options:
  -i [iface]	Capture packets on specified interface
  -p		Create packet capture with filter: $default_pcap_params
  -P [params]	Create packet capture with custom filter
  -t [sec]	Timeout for noninteractive debug

Syscall tracing options:
  -s		Trace syslog
  -t [sec]	Timeout for noninteractive debug
END
[ -n "$2" ] && printf "\nError: %s\n\n" "$2"
exit ${1:-0}
}

###
### Parsing optional parameters
###

while getopts "hldD:pP:w:i:W:R:t:s" opt ; do
	case $opt in
		d)
			[ -n "$debug_params" ] && debun_usage 2
			debug_params="$default_debug_params"
			debug_mode=1
			;;
		D)
			[ -n "$debug_params" ] && debun_usage 2
			debug_params="$OPTARG"
			debug_mode=1
			;;
		i)
			[ -n "$pcap_iface" ] && debun_usage 2
			pcap_iface="$OPTARG"
			;;
		h)
			debun_usage
			;;
		l)
			privacy_mode=1
			;;
		p)
			[ -n "$pcap_params" ] && debun_usage 2
			pcap_params="$default_pcap_params"
			debug_mode=1
			;;
		P)
			[ -n "$pcap_params" ] && debun_usage 2
			pcap_params="$OPTARG"
			debug_mode=1
			;;
		R)
			binprefix="$OPTARG"
			;;
		t)
			timeout="$OPTARG"
			;;
		w)
			waitforit="$OPTARG"
			;;
		W)
			workdir="$OPTARG"
			;;
		s)
			tracing=1
			debug_mode=1
			;;
		*)
			debun_usage 2
			;;
	esac
done
# Parameter consistency checks
[ -n "$pcap_iface" ] && [ -z "$pcap_params" ] && debun_usage 2 "Pcap interface without packet caputre params (-p|-P args)"
[ -n "$waitforit" ] && [ -z "$debug_params" ] && debun_usage 2 "Waiting without debug mode run (-d|-D args)"
[ -n "$timeout" ] && [ -z "$debug_mode" ] && debun_usage 2 "Timeout without debug mode or packet capture"
[ -n "$privacy_mode" ] && [ "x$debug_params" = "x$default_debug_params" ] && debug_params="$default_ldebug_params"
#if [ -n "$pcap_params" ]; then
#	hash tcpdump || debun_usage 2 "Packet capture requested, but no tcpdump in your PATH"
#fi
syslogbin=${binprefix}/sbin/syslog-ng
syslogrealbin=${binprefix}/libexec/syslog-ng
vardir=${binprefix}/var
confdir=${binprefix}/etc

debun_init () {
	#Create temp dir, to place files into
	host=`uname -n`
	date=`date '+%Y-%m-%d_%H:%M'`
	tmpdir=${workdir}/syslog.debun.${host}.${date}.$$
	( umask 077 ; mkdir ${tmpdir} )
	[ -d "$tmpdir" ] || { printf "Could not create a temp directory\n" >&2 ; exit 1 ; }
	[ -z "$tmpdir" ] && { printf "Could not create a temp directory\n" >&2 ; exit 1 ; }

	# Start redirections

	#exec 3>&1 >${tmpdir}/syslog-ng.debun.txt 2>${tmpdir}/syslog-ng.debun.txt
	exec 3>&1 >${tmpdir}/syslog-ng.debun.txt 2>&1
	echo "Syslog-NG DEBUg buNdle generator"
	sync
	while [ ! -f ${tmpdir}/syslog-ng.debun.txt ] ; do sleep 1 ; done
	#nohup tail -f ${tmpdir}/syslog-ng.debun.txt >&3 &
	tail -f ${tmpdir}/syslog-ng.debun.txt >&3 &
	tailpid=$!
	#disown
}

debun_finish_debug () {
	if checkpid ${debugpid} ; then
		kill -INT $debugpid
		checkpid ${debugpid} && sleep 1
		checkpid ${debugpid} && kill -9 $debugpid
		checkpid ${debugpid} && sleep 1
		checkpid ${debugpid} && echo "I gave up... debugger pid doesn't die"
	fi
	if [ "${debugpid}" != "none" ]; then
		printf 'Debugpid: "%s"\n' "${debugpid}"
		$service_start
	fi
	if checkpid ${debugtailpid} ; then
		kill $debugtailpid
	fi
	if checkpid ${pcappid} ; then
		kill -INT $pcappid
	fi
	if [ -n "$tracing" ]; then
		for i in ${tracepids} ; do
			checkpid $i && kill -INT $i
		done
		sleep 2
		for i in ${tracepids} ; do
			checkpid $i && kill -9 $i 2>/dev/null
		done
	fi
	mywait
}

debun_do_tarball () {
	cd $tmpdir
	touch ${tmpdir}.tgz
	chmod 600 ${tmpdir}.tgz
	$selftar | gzip -9 >${tmpdir}.tgz
	cd ..
	rm -r "${tmpdir}"
	printf "Terminating live message watcher: "
	sync
	kill $tailpid
	sync
	sleep 1
}

debun_final() {
	debun_finish_debug
	$service_status >${tmpdir}/svc.post
	printf "\nDebug Bundle generation: Done.\n"
	exec >&3 2>&1
	debun_do_tarball
	printf "\n\nYour debug bundle wil be at %s.tgz\n" "$tmpdir"
}

add_extra () {
	extras="${extras}${extras:+ }$@"
}

###
###PROCESS HANDLING FUNCTIONS
###
getparent () {
	local self
	local parent
	local ret
	local tmpfile=${tmpdir}/getparent.$$.txt
	$pseao pid,ppid >$tmpfile
	# Default value, learned after getchilds()'s forkbomb case
	unset ret
	while read self parent ; do
		[ "$1" = "$self" ] || continue
		ret=$parent
	done < $tmpfile
	rm $tmpfile
	echo $ret
}

getchilds () {
	local childs
	local dummy
	local child
	local tmpfile=${tmpdir}/getchilds.$$.txt
	$pseao ppid,pid >$tmpfile
	# Need to initialize it with a default value, since dash allows to inherit the caller's value, even if it's a local variable
	unset childs
	while read dummy child ; do
		[ "$1" = "$dummy" ] || continue
		childs="${childs}${childs:+ }$child"
	done < $tmpfile
	rm $tmpfile
	echo ${childs}
}

getallchilds () {
	local childs
	local subchilds
	childs="`getchilds $1`"
	local i
	# Default value, learned after getchilds()'s forkbomb case
	unset subchilds
	for i in ${childs} ; do
		subchilds="${subchilds}${subchilds:+ }`getallchilds $i`"
	done
	echo ${childs} ${subchilds}
}

acquire_system_info () {
	printf "System's full uname: "
	uname -a | tee ${tmpdir}/sys.uname
}

acquire_network_info () {
	printf "Getting network-interface information: "
	if $ipconfig >${tmpdir}/net.ip ; then
		echo "Success"
	else
		echo "Failed"
	fi
	printf "Getting network routes: "
	if $routeconfig >${tmpdir}/net.route ; then
		echo "Success"
	else
		echo "Failed"
	fi
	echo "Getting DNS resolution-related informations: "
	[ -f /etc/nsswitch.conf ] && cp /etc/nsswitch.conf ${tmpdir}/sys.nsswitch.conf
	[ -f /etc/resolv.conf ] && cp /etc/resolv.conf ${tmpdir}/sys.resolv.conf
	[ -f /etc/hosts ] && cp /etc/hosts ${tmpdir}/sys.hosts
	echo "Done."
}

acquire_system_process_info () {
	echo "List all processes"
	$pscmd >${tmpdir}/sys.ps
}

acquire_filesystem_info () {
	echo "Mount and disk free info collection"
	$dfk >${tmpdir}/sys.df_k
	$dfh >${tmpdir}/sys.df_h
	$mount >${tmpdir}/sys.mount
}

acquire_system_other_info () {
	$w >${tmpdir}/sys.w
	$dmesg >${tmpdir}/sys.dmesg
	$netstatnlp >${tmpdir}/sys.netstat
	free >${tmpdir}/sys.free
	vmstat >${tmpdir}/sys.vmstat
}

### Here comes the general info acquiring parts
acquire_general_info () {
	printf "\nStart general info collection\n"
	acquire_system_info
	[ -n "$privacy_mode" ] && return
	acquire_network_info
	acquire_system_process_info
	acquire_filesystem_info
	acquire_system_other_info
}

acquire_syslog_config () {
	echo "Copy configs from $confdir"
	cd $confdir
	mkdir  ${tmpdir}/config
	find . | tee ${tmpdir}/syslog.etc.files | grep -v '\.key$' | \
		while read FILE; do grep -q "PRIVATE KEY-----" "$FILE" 2>/dev/null || echo "$FILE" ; done | \
		cpio -pd ${tmpdir}/config
}

acquire_syslog_pids () {
	echo 'Old "getsyslogpids":' >${tmpdir}/syslog.pids
	$getsyslogpids >>${tmpdir}/syslog.pids
	if [ -r "${vardir}/run/syslog-ng.pid" ]; then
		sngpid=`cat ${vardir}/run/syslog-ng.pid`
	else
		# Handle when fhs is "linux"-like
		sngpid=`cat ${vardir}/syslog-ng.pid`
	fi
	ppid=`getparent $sngpid`
	sngallpids="`getallchilds $sngpid`"
	echo "SVpid: $ppid SNGpid: $sngpid Chpids: ${sngallpids}" >>${tmpdir}/syslog.pids
	tail -1 ${tmpdir}/syslog.pids
	if [ -n "$ppid" ]; then
		sngallpids="$ppid $sngpid ${sngallpids}"
	else
		sngallpids="` $getsyslogpids `"
	fi
	# drop out the unneeded white spaces, since that disturb the ps command
	sngallpids=`echo ${sngallpids}`
	printf 'ps -l -f -p "%s"\n' "${sngallpids}" >>${tmpdir}/syslog.pids
	ps -l -f -p "${sngallpids}" >>${tmpdir}/syslog.pids
	$service_status >${tmpdir}/svc.pre
}

acquire_syslog_info () {
	echo "Syslog-ng's exact version: $syslogbin"
	$syslogbin --version > ${tmpdir}/syslog.version
	head -1 ${tmpdir}/syslog.version
	${syslogbin}-ctl stats > ${tmpdir}/syslog.stats
	echo ${syslogbin}-ctl stats
	for i in ${sngallpids} ; do 
		$lsof $i >${tmpdir}/syslog.$i.lsof
		myplimit $i >${tmpdir}/syslog.$i.limits
	done
	$syslogbin -s --preprocess-into ${tmpdir}/syslog.pp.conf
}

acquire_syslog_var () {
	$duks $vardir >${tmpdir}/syslog.duks.var
	read vardu dir <${tmpdir}/syslog.duks.var
	mkdir ${tmpdir}/var
	cd "$vardir"
	if [ "$vardu" -lt "$varlimit" ] ; then
		find . |grep -v run\\/syslog-ng.ctl$ | cpio -pd ${tmpdir}/var
	else
		printf "Size of $vardir is larger than $varlimit kilobytes.\n"
		printf "Do you really want to copy it's contents? Type 'YES' with all capitals: "
		read ans
		[ "$ans" = "YES" ] && find . |grep -v run\\/syslog-ng.ctl$ | cpio -pd ${tmpdir}/var
	fi
}

format_ldd_output () {
	while read x ; do
		x="${x#*=>}"
		x="/${x#*/}"
		x="${x%% (*}"
		x="${x%%(*}"
		[ "${x}" != "/ " ] && [ -f "${x}" ] && echo "$x"
	done
}


acquire_syslog_ldinfo () {
	$lddcmd $syslogrealbin |grep -v needs >${tmpdir}/syslog.ldd
	format_ldd_output <${tmpdir}/syslog.ldd >${tmpdir}/syslog.ldfiles
	for i in `cat ${tmpdir}/syslog.ldfiles ` ; do
		distpkgoffile $i >>${tmpdir}/syslog.ldpkg
	done
	distpkgoffile_cleanup
	sort <${tmpdir}/syslog.ldpkg | uniq >${tmpdir}/syslog.ldpkg.u
	mv ${tmpdir}/syslog.ldpkg.u ${tmpdir}/syslog.ldpkg
	for i in `cat ${tmpdir}/syslog.ldpkg ` ; do
		distpkgstatus $i >>${tmpdir}/syslog.ldinfos
	done
}

acquire_syslog_startup_method () {
	echo "Detecting init system: "
	if [ -d "/run/systemd/system" ]; then
		acquire_syslog_startup_systemdunit
	elif [ -d "/lib/svc/method" ]; then
		acquire_syslog_startup_svc
	else
		acquire_syslog_startup_initscript
	fi
}

acquire_syslog_startup_initscript () {
	if [ -n "${initfile}" ]; then
		echo "falling back to SystemV init style..."
		cp "${initfile}" "${tmpdir}/sys.init.syslog-ng"
		chmod 0660 "${tmpdir}/sys.init.syslog-ng"
	else
		echo "none."
	fi
}

acquire_syslog_startup_systemdunit () {
	echo "systemd detected..."
	cp "/usr/lib/systemd/system/syslog-ng.service" "${tmpdir}/sys.service.syslog-ng"
}

acquire_syslog_startup_svc () {
	echo "Solaris SMF detected..."
	cp "/lib/svc/method/syslog-ng" "${tmpdir}/sys.svc-method.syslog-ng"
	chmod 0660 "${tmpdir}/sys.svc-method.syslog-ng"
	cp "/var/svc/manifest/system/syslog-ng.xml" "${tmpdir}/sys.svc-manifest.syslog-ng.xml"
}

acquire_syslog_all () {
	printf "\nStart Syslog-specific info collection\n"
	acquire_syslog_config
	acquire_syslog_pids
	acquire_syslog_info
	acquire_syslog_var
	acquire_syslog_ldinfo
	acquire_syslog_startup_method

}

acquire_syslog_nprv () {
	printf "\nStart Syslog-specific info collection (light)\n"
	acquire_syslog_pids
	acquire_syslog_info
	acquire_syslog_ldinfo
	acquire_syslog_startup_method
}

fhs_set_linux () {
	confdir=/etc/syslog-ng
	vardir=/var/lib/syslog-ng
	syslogbin=/usr/sbin/syslog-ng
	syslogrealbin=/usr/sbin/syslog-ng
}

fhs_set_unix () {
	:
}
### Here comes the linux & distro specific parts

debun_extra_debian () {
	printf "\nDebian specific checks\n"
	printf "Check package files integrity\n"
	cd /
	md5sum --quiet -c /var/lib/dpkg/info/syslog-ng*.md5sums && echo Package files are intact
	echo "list syslog-related packages"
	dpkg -l |grep syslog > ${tmpdir}/deb.packages
}

debun_extra_redhat () {
	printf "\nRedhat specific checks\n"
	echo "Check package files integrity"
	rpm -V syslog-ng-premium-edition && echo "syslog-ng-premium-edition: Package files are intact"
	rpm -V syslog-ng-premium-edition-client && echo "syslog-ng-premium-edition-client: Package files are intact"
	rpm -V syslog-ng-premium-edition-compact && echo "syslog-ng-premium-edition-compact: Package files are intact"
	echo "list syslog-related packages"
	rpm -qa |grep syslog > ${tmpdir}/rpm.packages
}

debun_extra_slackware () {
	printf "\nSlackware Linux specific checks\n"
	echo "list syslog-related packages"
	find /var/log/packages -name "*sys*log*" | while read -r FILE; do echo "${FILE##*/}"; done > ${tmpdir}/pkg.packages
}

debun_extra_suse() {
	printf "\nSuSE specific checks\n"
	echo "Check package files integrity"
	rpm -V syslog-ng-premium-edition && echo "syslog-ng-premium-edition: Package files are intact"
	rpm -V syslog-ng-premium-edition-client && echo "syslog-ng-premium-edition-client: Package files are intact"
	rpm -V syslog-ng-premium-edition-compact && echo "syslog-ng-premium-edition-compact: Package files are intact"
	echo "list syslog-related packages"
	rpm -qa | grep syslog > ${tmpdir}/rpm.packages
	#on opensuse "ss utility, iproute2-ss071016" crashes when run with the -punt CLI options
	if is_available netstat; then
		#this info should only be collected if the user has not requested privacy mode
		#we value our customer's sense of privacy
		if [ -z "$privacy_mode" ]; then
			netstat -punt >${tmpdir}/sys.netstat.est.noss
		fi
	fi

}

debun_extra_genlinux () {
	if is_available getenforce; then
		getenforce >${tmpdir}/sys.selinux
	else
		echo "No getenforce in path." >${tmpdir}/sys.selinux
	fi
	sysctl -a >${tmpdir}/sys.sysctl.all 2>/dev/null
}

debun_linux () {
	if [ "$dist" = "Debian" ]; then
		add_extra debun_extra_debian
	elif [ "$dist" = "Ubuntu" ]; then
		add_extra debun_extra_debian
	elif [ "$dist" = "CentOS" ]; then
		add_extra debun_extra_redhat
	elif [ "$dist" = "RedHatEnterpriseServer" ]; then
		add_extra debun_extra_redhat
	elif [ "$dist" = "RHEL" ]; then
		add_extra debun_extra_redhat
	elif [ "$dist" = "OracleServer" ]; then
		add_extra debun_extra_redhat
	elif [ "$dist" = "EnterpriseEnterpriseServer" ]; then
		add_extra debun_extra_redhat
	elif [ "$dist" = "SUSE LINUX" ]; then
		add_extra debun_extra_suse
	elif [ "$dist" = "Slackware" ]; then
		add_extra debun_extra_slackware
	else
		echo "Unknown Distro, perhaps unsupported"
	fi

	add_extra debun_extra_genlinux
}

debun_extra_gensolaris () {
	sysdef >${tmpdir}/sys.sysdef
	kstat >${tmpdir}/sys.kstat
	cp /etc/release ${tmpdir}/sys.release
	if is_available showrev ; then
		showrev >${tmpdir}/sys.showrev
	fi
}

### Here comes solaris specific parts
debun_solaris () {
	add_extra debun_extra_gensolaris

	pkginfo | grep -i syslog > ${tmpdir}/pkg.packages

	if is_available svcadm ; then
		service_stop="svcadm disable syslog-ng"
		service_start="svcadm enable syslog-ng"
		service_status="svcs syslog-ng"
	fi
}

debun_extra_freebsd() {
	:
}

debun_freebsd() {
	add_extra debun_extra_freebsd
}

debun_extra_hpux () {
	sysdef >${tmpdir}/sys.sysdef
	swlist >${tmpdir}/sys.swlist
}

debun_hpux () {
	add_extra debun_extra_hpux
}

debun_extra_aix () {
	alog -o -t console >${tmpdir}/sys.console-log
}

debun_aix () {
	add_extra debun_extra_aix

	echo "Check package files integrity"
	rpm -V syslog-ng-premium-edition && echo "syslog-ng-premium-edition: Package files are intact"
	rpm -V syslog-ng-premium-edition-client && echo "syslog-ng-premium-edition-client: Package files are intact"
	rpm -V syslog-ng-premium-edition-compact && echo "syslog-ng-premium-edition-compact: Package files are intact"
	echo "list syslog-related packages"
	rpm -qa |grep syslog > ${tmpdir}/rpm.packages
}

detect_env_linux () {
	if is_available lsb_release ; then
		lsb_release -a | tee ${tmpdir}/lsb.all
		dist=`lsb_release -si`
	elif [ -r /etc/debian_version ]; then
		dist="Debian"
	elif [ -r /etc/redhat-release ]; then
		dist="RHEL"
	elif [ -r /etc/slackware-version ]; then
		dist="Slackware"
	elif [ -r /etc/SuSE-release ]; then
		dist="SUSE LINUX"
	fi
}

detect_env () {
	###
	### Detecting syslog-ng ver: ose or pe
	###

	echo "Start environment detection"
	if [ -x /opt/syslog-ng/bin/loggen ] ; then
		syslogfhs=unix
		echo "Unix-like FHS detected"
	elif [ -d /etc/syslog-ng/ ]; then
		syslogfhs=linux
		echo "Linux-type FHS detected"
	else
		syslogfhs=unknown
		confdir=/nonexistent
		echo "No syslog-ng detected"
	fi

	os=`uname -s`
	if [ "$os" = "Linux" ]; then
		detect_env_linux
	fi
}

setup_env_debian () {
	unset distpkgoffile
	unset distpkgstatus
	distpkgoffile () {
		local tmpfile=${tmpdir}/distpkgoffile.$$.tmp
		dpkg -S $1 >$tmpfile
		read x < $tmpfile
		rm $tmpfile
		echo "${x%: /*}"
	}
	distpkgstatus () {
		printf "@@@Package info for: %s\n" "$1"
		dpkg -s $1
		printf "\n"
	}
	#syslogrealbin=${binprefix}/sbin/syslog-ng
}

setup_env_redhat () {
	unset distpkgoffile
	unset distpkgstatus
	distpkgoffile () {
		local tmpfile=${tmpdir}/distpkgoffile.$$.tmp
		rpm -qf $1 >$tmpfile
		read x < $tmpfile
		rm $tmpfile
		echo "$x"
	}
	distpkgstatus () {
		printf "@@@Package info for: %s\n" "$1"
		rpm -qi $1
		printf "\n"
	}
}

setup_env_suse  () {
	unset distpkgoffile
	unset distpkgstatus
	distpkgoffile () {
		local tmpfile=${tmpdir}/distpkgoffile.$$.tmp
		rpm -qf $1 >$tmpfile
		read x < $tmpfile
		rm $tmpfile
		echo "$x"
	}
	distpkgstatus () {
		printf "@@@Package info for: %s\n" "$1"
		rpm -qi $1
		printf "\n"
	}
}

setup_env_slackware  () {
	initfile="/etc/rc.d/rc.syslog"
	service_start="${initfile} start"
	service_stop="${initfile} stop"

	if [ -f "/var/run/syslog-ng.pid" ]; then
		piddir="/var/run"
	fi

	unset service_status
	unset distpkgoffile
	unset distpkgstatus

	distpkgoffile () {
		local LINKTARGET
		local PKGLOGFILENAMES
		local SEARCHSTRING
		PKGLOGFILE=
		LINKTARGET=$( readlink -f "${1}" 2>/dev/null )
		SEARCHSTRING="${LINKTARGET##/}"
		PKGLOGFILENAMES=$( \
			( grep -r -m 1 -E "^${SEARCHSTRING}\$" /var/log/packages ; \
				[ "${SEARCHSTRING%%/*}" = "lib" ] && grep -r -m 1 -E "^lib/incoming/${SEARCHSTRING#*/}\$" /var/log/packages ; \
				[ "${SEARCHSTRING%%/*}" = "lib64" ] && grep -r -m 1 -E "^lib64/incoming/${SEARCHSTRING#*/}\$" /var/log/packages ) | \
			while read -r RESULT; do
				RESULT="${RESULT%%:*}"
				echo "${RESULT##*/}"
			done )
		if [ -n "${PKGLOGFILENAMES}" ]; then
			echo "${PKGLOGFILENAMES}"
		else
			echo "No installed package for '$1' found!" >&2
		fi
	}
	distpkgstatus () {
		local PIVOT
		local LASTLINE
		local PKGINFO
		echo "@@@Package info for: $1"
		PKGINFO=$( \
			( find /var/log/packages/ -name "$1*" ) | \
			while read -r PKGLOGFILE; do
				PIVOT=$( fgrep -n "FILE LIST:" "$PKGLOGFILE" )
				LASTLINE=$(( ${PIVOT%%:*} - 1 )) 2>/dev/null
				head -n ${LASTLINE:-16} "$PKGLOGFILE"
				echo ""
			done )
		if [ -n "${PKGINFO}" ]; then
			echo "${PKGINFO}"
		else
			echo "The package '$1' is not installed, or does not exist!" >&2
		fi
	}
}

setup_env_linux () {
	if [ "$dist" = "Debian" ]; then
		setup_env_debian
	elif [ "$dist" = "Ubuntu" ]; then
		setup_env_debian
	elif [ "$dist" = "CentOS" ]; then
		setup_env_redhat
	elif [ "$dist" = "RedHatEnterpriseServer" ]; then
		setup_env_redhat
	elif [ "$dist" = "RHEL" ]; then
		setup_env_redhat
	elif [ "$dist" = "OracleServer" ]; then
		setup_env_redhat
	elif [ "$dist" = "EnterpriseEnterpriseServer" ]; then
		setup_env_redhat
	elif [ "$dist" = "SUSE LINUX" ]; then
		setup_env_suse
	elif [ "$dist" = "Slackware" ]; then
		setup_env_slackware
	else
		echo "Unknown Distro, perhaps unsupported"
	fi

	unset myplimit
	myplimit () { [ -f "/proc/$1/limits" ] && cat /proc/$1/limits ; }
}

setup_env_solaris () {
	lsof=pfiles
	ipconfig="ifconfig -a"
	pscmd="ps -eaf"
	tcpdumpcmd="snoop"
	tcpdumpopts="-P -q -o"
	pcapifparm="-d"
	netstatpunt="netstat -n"

	unset mypidof
	unset getsyslogpids
	unset netstatnlp
	unset myplimit
	unset free
	unset distpkgoffile
	unset distpkgstatus
	unset -f is_available

	is_available () { which "$1" | /usr/xpg4/bin/grep -q "no $1 in" && return 1 || return 0 ; }
	mypidof () { $pseao pid,comm | while read pid bin ; do [ "$bin" = "$1" ] && echo $pid ; done ; }
	getsyslogpids () { mypidof "${syslogrealbin}" ; }
	netstatnlp () { netstat -na ; }
	myplimit () { plimit $1 ; }
	free () { prtconf | grep Mem ; printf Pagesize:\  ; pagesize -a ; }
	distpkgoffile () {
		FILE="$1"
		if [ -L "/lib/64" ]; then
			FILE=`perl -sae '$libarch=readlink("/lib/64"); $filename =~ s/lib\/64/lib\/$libarch/; print "$filename\n";' -- -filename="$1"`
		fi
		pkgchk -l -p $FILE | \
		perl -ne 'if ( /^Referenced by the/ ) { $p=1; } elsif (/:/ or /^$/ ) { $p=0; } elsif ($p) { s/^\s+//; print ; } else { print "FAIL:".$_; }'
	}
	distpkgstatus () {
		printf "@@@Package info for: %s\n" "$1"
		pkginfo -l $1
		printf "\n"
	}
}

setup_env_freebsd () {
	netstatpunt="netstat -n"
	ipconfig="ifconfig -a"
	pseao="ps xao"
	initfile="/etc/rc.d/syslog-ng"
	service_stop="${initfile} stop"
	service_start="${initfile} start"
	service_status="${initfile} status"

	unset free
	unset netstatnlp
	unset mypidof
	unset getsyslogpids
	unset distpkgoffile
	unset distpkgstatus

	free () { top -bt 0 ; }
	netstatnlp () { sockstat ; }
	mypidof () { $pseao pid,comm | while read pid bin ; do [ "$bin" = "$1" ] && echo $pid ; done; }
	getsyslogpids () { mypidof syslog-ng ; }
	distpkgoffile () { : ; }
	distpkgstatus () { : ; }
}

setup_env_hpux () {
	gzipcmd="/usr/contrib/bin/gzip -9"
	lddcmd="/usr/ccs/bin/ldd"
	trace="/usr/local/bin/truss -f"
	netstatsu="netstat -s"
	netstatpunt="netstat -n"
	ipconfig="netstat -ni"
	pscmd="ps -eaf"
	dfh="df"
	initfile="/sbin/init.d/syslog-ng"
	service_stop="${initfile} stop"
	service_start="${initfile} start"
	service_status="${initfile} status"

	unset -f free
	unset -f netstatnlp
	unset -f mypidof
	unset -f getsyslogpids
	unset -f getparent
	unset -f getchilds
	unset -f is_available
	unset -f distpkgoffile
	unset -f distpkgstatus
	unset -f distpkgoffile_cleanup

	is_available () { which "$1" | grep -q "no $1 in" && return 1 || return 0 ; }
	free () { swapinfo -tam ; }
	netstatnlp () { netstat -na ; }
	mypidof () { ps -e -f | while read uid pid ppid c stime tty time command extra ; do
		if [ "${stime%%:*}" = "${stime}" ]
		then
			[ "${extra%% *}" = "$1" ] && echo $pid
		else
			[ "${command%% *}" = "$1" ] && echo $pid
		fi ; done ; }
	getsyslogpids () { mypidof "${syslogrealbin}" ; }
	getparent () {
		local self
		local parent
		local ret
		local tmpfile=${tmpdir}/getparent.$$.txt
		ps -ef  >$tmpfile
		while read user pid ppid dummy ; do
			[ "$1" = "$pid" ] || continue
			ret=$ppid
		done < $tmpfile
		rm $tmpfile
		echo $ret
	}
	getchilds () {
		local childs
		local dummy
		local child
		local tmpfile=${tmpdir}/getchilds.$$.txt
		ps -ef >$tmpfile
		while read user pid ppid dummy ; do
			[ "$1" = "$ppid" ] || continue
			childs="${childs}${childs:+ }$pid"
		done < $tmpfile
		rm $tmpfile
		echo ${childs}
	}

	distpkgoffile () {
		local tmpfile=${tmpdir}/distpkgoffile.tmp
		if [ ! -f $tmpfile ]; then
			swlist -l file > "$tmpfile"
		fi
		grep $1 $tmpfile | cut -d : -f 1 | while read x; do
			echo "$x"
		done
	}
	distpkgstatus () {
		printf "@@@Package info for fileset/patch: %s\n" "$1"
		swlist -l fileset -a title -a description $1 | grep -v "^#" | grep -v "^\""
		printf "\n"
	}
	distpkgoffile_cleanup () {
		if [ -f "${tmpdir}/distpkgoffile.tmp" ]; then
			echo "Removing package list cache"
			rm "${tmpdir}/distpkgoffile.tmp"
		fi
	}
}

setup_env_aix () {
	ipconfig="ifconfig -a"
	pscmd="ps -eaf"
	dfh="df -k"
	netstatsu="netstat -s"
	netstatpunt="netstat -n"
	dmesg="alog -o -t boot"
	initfile=
	service_stop="/usr/bin/stopsrc -s syslog-ng"
	service_start="/usr/bin/startsrc -s syslog-ng"
	service_status="/usr/bin/lssrc -s syslog-ng"

	unset initfile
	unset netstatnlp
	unset routeconfig
	unset free
	unset getsyslogpids
	unset mypidof
	unset format_ldd_output

	format_ldd_output () { sed -e 's:^[^/]*\(.*\)$:\1:' -e 's:^\(.*\)(.*)$:\1:'; }
	netstatnlp () { netstat -na | grep LISTEN ; }
	routeconfig () { if netstat -nr 2>&1 | grep -q 'Permission error' ; then echo 'WPAR without its own routing table.' ; else netstat -nr ; fi ; }
	free () { svmon -G -O unit=KB ; }
	mypidof () { ps -eaf | while read user pid ppid c stime tty time cmd extra; do
		if [ "${stime%%:*}" = "${stime}" ]
		then
			[ "${extra%% *}" = "$1" ] && echo $pid
		else
			[ "${cmd%% *}" = "$1" ] && echo $pid
		fi ; done ; }
	getsyslogpids () { mypidof "${syslogrealbin}" ; }

	unset distpkgoffile
	unset distpkgstatus
	distpkgoffile () {
		local tmpfile=${tmpdir}/distpkgoffile.$$.tmp
		rpm -qf $1 >$tmpfile
		read x < $tmpfile
		rm $tmpfile
		echo "$x"
	}
	distpkgstatus () {
		printf "@@@Package info for: %s\n" "$1"
		rpm -qi $1
		printf "\n"
	}
}

setup_env_generic () {
	### Check if truss is available
	if is_available truss ; then
		trace="truss -f"
	fi

	### Check if ss is available (should only be present on Linux)
	if is_available ss ; then
		unset routeconfig
		unset netstatnlp

		routeconfig () { ip route show ; }
		netstatnlp () { ss -nlp ; }
		netstatsu="ss -su"
		netstatpunt="ss -punt"
	fi
}

setup_env() {
	###
	### Decide OS (switch-like)
	###
	printf "\nOperating System Name: %s\n" "$os"
	if [ "$os" = "Linux" ]; then
		setup_env_linux
	elif [ "$os" = "SunOS" ]; then
		setup_env_solaris
	elif [ "$os" = "FreeBSD" ]; then
		setup_env_freebsd
	elif [ "$os" = "HP-UX" ]; then
		setup_env_hpux
	elif [ "$os" = "AIX" ]; then
		setup_env_aix
	else
		echo "Unkonwn or (yet) unhandled system"
	fi

	setup_env_generic
}

### Check if truss is available
if hash truss ; then
	trace="truss -f"
fi
debun_run () {
	if [ "$os" = "Linux" ]; then
		debun_linux
	elif [ "$os" = "SunOS" ]; then
		debun_solaris
	elif [ "$os" = "FreeBSD" ]; then
		debun_freebsd
	elif [ "$os" = "HP-UX" ]; then
		debun_hpux
	elif [ "$os" = "AIX" ]; then
		debun_aix
	fi
}

run_specific_extras () {
for i in ${extras}; do
	$i
done
}

run_debug () {
printf "\nStart Debug collection\n"
if [ -n "$pcap_params" ]; then
	echo "Start packet dump in background with filters: $pcap_params"
	$tcpdump ${tmpdir}/debug.pcap ${pcap_iface:+$pcapifparm} ${pcap_iface} $pcap_params &
	pcappid=$!
fi
if [ -n "$tracing" ] && [ -z "$debug_params" ]; then
	for i in ${sngallpids}; do
		$trace -o ${tmpdir}/trace.${i}.txt -p $i &
		tracepids="${tracepids}${tracepids:+ }$!"
	done
fi
if [ -n "$waitforit" ]; then
	[ -n "$pcap_params" ] && sleep 1
	echo "Waiting $waitforit secs before stop system's syslog-ng, and restart in debug mode."
	pad=''
	bs=''	
	for i in `seq 1 ${#waitforit}`; do pad="${pad} " ; bs="\b$bs" ; done
	printf "Start countdown: ${pad}" >&3
	for i in `seq $waitforit -1 1 `; do printf "${bs}${pad:${#i}}$i" >&3 ; sleep 1 ; done
	echo "0">&3
	touch ${tmpdir}/syslog.debug
fi
if [ -n "$debug_params" ]; then
	$service_stop
	# We should implement a better waiting for the system service's shutdown, sleep 1 works for now
	sleep 1
	echo "Start syslog-ng debug with params: $debug_params"
	if [ -n "$tracing" ]; then
		$trace -o ${tmpdir}/trace.dbg.txt $syslogbin $debug_params >>${tmpdir}/syslog.debug 2>&1 &
		i=$!
		tracepids="$i"
		debugpid="`getchilds $i`"
		echo "Trace: $i Debug: $debugpid"
	else
		$syslogbin $debug_params >>${tmpdir}/syslog.debug 2>&1 &
		debugpid=$!
	fi
fi
[ -n "$timeout" ] || echo "When you want to stop collecting data, press ENTER" >&3
if [ -n "$waitforit" ]; then
	sleep 1						# Let's gave time the user, to read the message about stoping
	tail -f ${tmpdir}/syslog.debug >&3 &
	debugtailpid=$!
	#disown
fi
if [ -n "$timeout" ];
then
	sleep "$timeout"
else
	read line
fi
}

###
### Main program tasks
###

debun_init
detect_env
setup_env
debun_run
[ "$syslogfhs" = "linux" ] && fhs_set_linux
[ "$syslogfhs" = "unix" ] && fhs_set_unix
run_specific_extras
acquire_general_info
if [ -n "$privacy_mode" ]; then
	acquire_syslog_nprv
else
	acquire_syslog_all
fi
[ -n "$debug_mode" ] && run_debug
debun_final
